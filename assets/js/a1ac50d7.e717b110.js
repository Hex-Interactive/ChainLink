"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2160],{6889:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var n=t(5893),s=t(1151);const i={sidebar_position:1},r="Syntax",o={id:"concepts/chain/syntax",title:"Syntax",description:"The syntax of Chain is quite simple. Generally, it is a list of calls separated by semicolons. Calls can be Actions or Routines. Calls can have a target, denoted by an arrow (->) to target a certain identifier, part of Link Ids. Some Actions require a target to be provided and would be documented as such. Arguments can be passed into calls, if needed.",source:"@site/docs/concepts/chain/syntax.md",sourceDirName:"concepts/chain",slug:"/concepts/chain/syntax",permalink:"/ChainLink/docs/concepts/chain/syntax",draft:!1,unlisted:!1,editUrl:"https://github.com/Hex-Interactive/ChainLink/edit/main/docs/docs/concepts/chain/syntax.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"guideSidebar",previous:{title:"Chain",permalink:"/ChainLink/docs/concepts/chain/"},next:{title:"Usage",permalink:"/ChainLink/docs/concepts/chain/usage"}},c={},d=[{value:"Examples",id:"examples",level:2}];function l(e){const a={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(a.h1,{id:"syntax",children:"Syntax"}),"\n",(0,n.jsxs)(a.p,{children:["The syntax of Chain is quite simple. Generally, it is a list of calls separated by semicolons. Calls can be ",(0,n.jsx)(a.a,{href:"../actions",children:"Actions"})," or ",(0,n.jsx)(a.a,{href:"../routines",children:"Routines"}),". Calls can have a target, denoted by an arrow (",(0,n.jsx)(a.code,{children:"->"}),") to ",(0,n.jsx)(a.a,{href:"../links#referencing",children:"target a certain identifier"}),", part of Link Ids. Some Actions require a target to be provided and would be documented as such. Arguments can be passed into calls, if needed."]}),"\n",(0,n.jsxs)(a.p,{children:["Some Actions might have a certain number of arguments of certain types required. The arguments themselves can be one of the ",(0,n.jsx)(a.a,{href:"../chain#supported-dataypes",children:"supported Chain datatypes"}),", and ",(0,n.jsx)(a.a,{href:"https://en.wikipedia.org/wiki/Binary_expression_tree",children:"binary expressions"})," (math and boolean evaluation) are allowed."]}),"\n",(0,n.jsx)(a.h2,{id:"examples",children:"Examples"}),"\n",(0,n.jsx)(a.p,{children:"An example of a Chain script can be seen below."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{children:"Trapdoor->Drop();Trapdoor->Force();ActivateAlarm();\n"})}),"\n",(0,n.jsxs)(a.p,{children:["This this example, the first two statements are calls which both target the identifier ",(0,n.jsx)(a.code,{children:"Trapdoor"}),". The last call would be a Routine that would have some instructions to activate an alarm, turning on red lights and playing sounds."]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{children:'AlarmLight->PlaySounds("AlarmSFX");AlarmLight->SetAttribute("IsActive", true);\n'})}),"\n",(0,n.jsxs)(a.p,{children:["This next example is part of the Chain that executes in the Routine ",(0,n.jsx)(a.code,{children:"ActivateAlarm"})," from the last example. This shows that adding arguments to calls is as simple as adding them inside the call parenthesis. In the case of multiple arguments, add a comma to separate them."]})]})}function h(e={}){const{wrapper:a}={...(0,s.a)(),...e.components};return a?(0,n.jsx)(a,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}}}]);