"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5582],{3981:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>o});var n=t(4848),s=t(8453);const i={sidebar_position:2},l="Syntax",r={id:"chain/syntax",title:"Syntax",description:"The syntax of Chain is quite simple. Generally, it is a list of calls separated by semicolons. Calls can have a target, denoted by an arrow (->) to target a certain identifier. Some Actions require a target to be provided and would be documented as such. Arguments should be passed into calls, if required.",source:"@site/docs/chain/syntax.md",sourceDirName:"chain",slug:"/chain/syntax",permalink:"/ChainLink/docs/chain/syntax",draft:!1,unlisted:!1,editUrl:"https://github.com/Hex-Interactive/ChainLink/edit/main/docs/docs/chain/syntax.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"chain",previous:{title:"Introduction",permalink:"/ChainLink/docs/chain"},next:{title:"Types",permalink:"/ChainLink/docs/chain/types"}},d={},o=[{value:"Builtin Calls",id:"builtin-calls",level:2},{value:"Examples",id:"examples",level:2}];function c(e){const a={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(a.h1,{id:"syntax",children:"Syntax"}),"\n",(0,n.jsxs)(a.p,{children:["The syntax of Chain is quite simple. Generally, it is a list of calls separated by semicolons. Calls can have a target, denoted by an arrow (",(0,n.jsx)(a.code,{children:"->"}),") to target a certain identifier. Some Actions require a target to be provided and would be documented as such. Arguments should be passed into calls, if required."]}),"\n",(0,n.jsx)(a.p,{children:"Chain is able to evaluate basic math expressions (addition, multiplication, etc.) as well as boolean logic (and, or, not) within call arguments. Calls that do not have a target are capable of returning values to be used in expressions, although this depends on whether what you are actually calling returns a value or not."}),"\n",(0,n.jsx)(a.h2,{id:"builtin-calls",children:"Builtin Calls"}),"\n",(0,n.jsx)(a.p,{children:"Chain comes with some calls regardless of the implementation of Chain."}),"\n",(0,n.jsxs)(a.table,{children:[(0,n.jsx)(a.thead,{children:(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.th,{children:"Call"}),(0,n.jsx)(a.th,{children:"Functionality"})]})}),(0,n.jsxs)(a.tbody,{children:[(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:"If"})}),(0,n.jsx)(a.td,{children:"Conditional evaluation"})]}),(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:"Var"})}),(0,n.jsx)(a.td,{children:"Defines a variable"})]}),(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:"Get"})}),(0,n.jsx)(a.td,{children:"Reads a defined variable"})]})]})]}),"\n",(0,n.jsx)(a.h2,{id:"examples",children:"Examples"}),"\n",(0,n.jsx)(a.p,{children:"An example of a Chain script can be seen below."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-cpp",children:"Trapdoor->Drop();\nTrapdoor->Force();\nActivateAlarm();\n"})}),"\n",(0,n.jsxs)(a.p,{children:["This this example, the first two statements are calls which both target the identifier ",(0,n.jsx)(a.code,{children:"Trapdoor"}),". The last call would be a Routine that would have some instructions to activate an alarm, turning on red lights and playing sounds."]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-cpp",children:'AlarmLight->PlaySounds("AlarmSFX");\nAlarmLight->SetAttribute("IsActive", true);\n'})}),"\n",(0,n.jsxs)(a.p,{children:["This next example is part of the Chain that executes in the Routine ",(0,n.jsx)(a.code,{children:"ActivateAlarm"})," from the last example. This shows that adding arguments to calls is as simple as adding them inside the call parenthesis. In the case of multiple arguments, add a comma to separate them."]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-cpp",children:'Var("shouldOpen", RandomBool());\nIf(Get("shouldOpen"), {\n\tDoor->Open();\n}, {\n\tDoor->Close();\n});\n'})}),"\n",(0,n.jsxs)(a.p,{children:["In this example, the variable and if-statement calls are shown off. The brackets passed as arguments of the ",(0,n.jsx)(a.code,{children:"If"})," call are known as ",(0,n.jsx)(a.a,{href:"types",children:"thunks"}),"."]})]})}function h(e={}){const{wrapper:a}={...(0,s.R)(),...e.components};return a?(0,n.jsx)(a,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}}}]);