"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2357],{4570:(e,i,a)=>{a.r(i),a.d(i,{assets:()=>l,contentTitle:()=>n,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>d});var t=a(5893),r=a(1151);const s={sidebar_position:5},n="Validators",o={id:"concepts/validators",title:"Validators",description:"Validators are used by the game developer to customize the internal logic of ChainLink by providing a place for game-specific logic. For example, Validators are used to customize the activation logic of Triggers. To register/define a Validator, see the configuration page.",source:"@site/docs/concepts/validators.md",sourceDirName:"concepts",slug:"/concepts/validators",permalink:"/ChainLink/docs/concepts/validators",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"guideSidebar",previous:{title:"Triggers",permalink:"/ChainLink/docs/concepts/triggers"},next:{title:"Chain",permalink:"/ChainLink/docs/concepts/chain/"}},l={},d=[{value:"Available Validators",id:"available-validators",level:2}];function c(e){const i={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.h1,{id:"validators",children:"Validators"}),"\n",(0,t.jsxs)(i.p,{children:["Validators are used by the game developer to customize the internal logic of ChainLink by providing a place for game-specific logic. For example, Validators are used to customize the activation logic of ",(0,t.jsx)(i.a,{href:"triggers",children:"Triggers"}),". To register/define a Validator, see the ",(0,t.jsx)(i.a,{href:"../getting-started/configuration#registering-validators",children:"configuration"})," page."]}),"\n",(0,t.jsx)(i.p,{children:"A Validator is a function that passes in a subject of a specific type (depends on the Validator) and returns a boolean. For example, defining a given Validator in the configuration table could look like something along these lines:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-lua",children:"ValidatorName = function(subject: T): boolean\n\treturn -- Insert conditional logic\nend\n"})}),"\n",(0,t.jsx)(i.h2,{id:"available-validators",children:"Available Validators"}),"\n",(0,t.jsx)(i.p,{children:"Only Validators from the table below are able to be registered:"}),"\n",(0,t.jsxs)(i.table,{children:[(0,t.jsx)(i.thead,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.th,{children:"Name"}),(0,t.jsx)(i.th,{children:"Subject Type"}),(0,t.jsx)(i.th,{children:"Purpose"}),(0,t.jsx)(i.th,{children:"Example Use Case"})]})}),(0,t.jsxs)(i.tbody,{children:[(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"CanTrigger"}),(0,t.jsx)(i.td,{children:"nil"}),(0,t.jsx)(i.td,{children:"Returns true if any Trigger is able to activate"}),(0,t.jsx)(i.td,{children:"Disabling all Triggers during a cutscene"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"CanTriggerPlayer"}),(0,t.jsx)(i.td,{children:"Player"}),(0,t.jsx)(i.td,{children:"Returns true if the player can activate Triggers"}),(0,t.jsx)(i.td,{children:"Making Triggers ignore dead players"})]})]})]})]})}function h(e={}){const{wrapper:i}={...(0,r.a)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);